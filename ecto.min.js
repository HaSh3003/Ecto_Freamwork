document.addEventListener("DOMContentLoaded",function(){const elementsWithIf=document.querySelectorAll("[if]");elementsWithIf.forEach((el)=>{const ifCondition=el.getAttribute("if");const condition=ifCondition.replace(/{{(.*?)}}/,(match,p1)=>{return window[p1]||""});const checkCondition=new Function("window",`return ${condition};`);if(!checkCondition(window)){el.style.display="none"}})});window.myframework={routes:{},loadcontent:function(link,addToHistory=!0){fetch(link).then((response)=>{if(!response.ok){throw new Error("Network response was not ok")}
return response.text()}).then((app)=>{const container=document.getElementById("app");container.innerHTML="";container.innerHTML=app;if(addToHistory){history.pushState({link},null,link)}}).catch((error)=>console.error("error",error))},handlePopState:function(event){if(event.state&&event.state.link){myframework.loadcontent(event.state.link,!1)}},init:function(){class routeElement extends HTMLElement{constructor(){super();this.addEventListener("click",(e)=>{e.preventDefault();const link=this.getAttribute("link");if(link){myframework.loadcontent(link)}})}}
customElements.define("x-route",routeElement);window.addEventListener("popstate",this.handlePopState)},};document.addEventListener("DOMContentLoaded",()=>{myframework.init()});class Component extends HTMLElement{constructor(){super();this.loadTemplate()}
async loadTemplate(){let templateUrl=this.getAttribute("src");if(!templateUrl)return;try{let response=await fetch(templateUrl);if(!response.ok)throw new Error("Failed to load template");let templateContent=await response.text();this.innerHTML=templateContent;this.replaceProps();this.applyConditions();this.setupEvents()}catch(error){console.error("Component Load Error:",error)}}
replaceProps(){[...this.attributes].forEach((attr)=>{if(attr.name!=="src"&&attr.name!=="if"){this.innerHTML=this.innerHTML.replaceAll(`{{${attr.name}}}`,attr.value)}})}
applyConditions(){let condition=this.getAttribute("if");if(condition){try{let shouldShow=new Function(`return (${condition})`)();this.style.display=shouldShow?"block":"none"}catch(error){console.error("Condition Error:",error)}}}
setupEvents(){[...this.attributes].forEach((attr)=>{if(attr.name.startsWith("on-")){let eventName=attr.name.slice(3);this.addEventListener(eventName,()=>{try{new Function(attr.value)()}catch(error){console.error("Event Error:",error)}})}})}}
class LoopEl extends HTMLElement{constructor(){super();const numberofLoop=this.getAttribute("repeat");let content=this.innerHTML;const ElementName=this.getAttribute("ElementName");if(!numberofLoop){console.error("repeat attribute is required");const errmessage=`repeat attribute is required, please add it`;const Ex='<lo-op repeat="5">Your Content Here</lo-op>';const code="500";Swal.fire({position:"center",icon:"error",title:`${errmessage}`,text:`${Ex}`,showConfirmButton:!1,})}else if(isNaN(Number(numberofLoop))){console.error("repeat attribute should be a number");const errmessage="repeat attribute should be a number";const code="500";Swal.fire({position:"center",icon:"error",title:`Error: ${code}`,text:errmessage,showConfirmButton:!1,})}else{this.innerHTML="";this.loopfunction(numberofLoop,content,ElementName)}}
loopfunction(numberofLoop,content,ElementName){for(let item=0;item<numberofLoop;item++){const newitem=document.createElement("div");newitem.innerHTML=content;newitem.classList.add(ElementName);newitem.classList.add(ElementName+"_"+(item+1));newitem.id=ElementName+"_id_"+(item+1);this.appendChild(newitem)}
document.dispatchEvent(new Event("elementsCreated"))}}
class XVar extends HTMLElement{constructor(){super();let name=this.getAttribute("name");let rawValue=this.getAttribute("value");let value=this.parseValue(rawValue);Object.defineProperty(window,name,{get:()=>this.value,set:(newValue)=>{this.value=newValue;this.updateElements(name,newValue)},});window[name]=value}
parseValue(value){try{return JSON.parse(value.replace(/'/g,'"'))}catch{return value}}
updateElements(name,newValue){document.querySelectorAll(`[if*="{{${name}}}"]`).forEach((el)=>{let condition=el.getAttribute("if");if(this.evaluateCondition(condition)){el.style.display="block";this.replaceVarsInElement(el)}else{el.style.display="none"}})}
replaceVarsInElement(el){const regex=/{{(.*?)}}/g;let text=el.innerHTML;let match;while((match=regex.exec(text))){const varName=match[1].trim();if(window[varName]!==undefined){let value=window[varName];if(typeof value==="string"){text=text.replace(match[0],value)}else{text=text.replace(match[0],value)}}}
el.innerHTML=text}
evaluateCondition(condition){const regex=/{{(.*?)}}/g;let match;while((match=regex.exec(condition))){const varName=match[1].trim();if(window[varName]!==undefined){let value=window[varName];if(typeof value==="string"){condition=condition.replace(match[0],`'${value}'`)}else{condition=condition.replace(match[0],value)}}else{condition=condition.replace(match[0],`false`)}}
try{return eval(condition)}catch{return!1}}}
class XClick extends HTMLElement{constructor(){super();this.addEventListener("click",()=>{let action=this.getAttribute("action");try{eval(action)}catch(error){console.error("XClick Error:",error)}})}}
class XLoop extends HTMLElement{constructor(){super();this.attachShadow({mode:"open"});this.name=this.getAttribute("name");this.template=this.innerHTML.trim();this.innerHTML="";this.render()}
render(){this.shadowRoot.innerHTML="";let items=window[this.name]||[];if(Array.isArray(items)){items.forEach((item)=>{let newItem=this.template.replace(/\{\{item\.(\w+)\}\}/g,(match,key)=>{return item[key]!==undefined?item[key]:match});this.shadowRoot.innerHTML+=newItem})}}}
class XInput extends HTMLElement{constructor(){super();let name=this.getAttribute("name");this.innerHTML=`<input type="text" value="${window[name] || ""}" />`;let input=this.querySelector("input");input.addEventListener("input",()=>{window[name]=input.value});window[name]=window[name]||""}}
customElements.define("x-click",XClick);customElements.define("x-loop",XLoop);customElements.define("x-input",XInput);customElements.define("x-var",XVar);customElements.define("x-loopy",LoopEl);customElements.define("x-component",Component)
